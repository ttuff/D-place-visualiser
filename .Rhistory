#color_return(39, 11, spring_data[,44])#
#
#color_return(40, 23, spring_data[,44])#
#color_return(41, 23, spring_data[,44])#
#
adjuster <- 38#
residuals <- 40#
up_down <- 5#
lines(declination(jd2016 + adjuster) + up_down)#
lines(declination(jd2016+ adjuster) + residuals + up_down, lty=2)#
lines(declination(jd2016+ adjuster) - residuals + up_down, lty=2)#
#
names(spring_data)#
head(spring_data)#
family <- as.factor(spring_data[,43])#
levels(family) <- rainbow(length(levels(family)))#
#
head(spring_data[,32:38])#
line_vectors <- spring_data[,c(4,32, 34, 36, 38)]#
dim(line_vectors)#
color_vector <- colorRampPalette(c( "#756bb1", "#bcbddc", "#efedf5"))(4)#
#
h <-300#
for(h in 1:length(spring_data[, 1])){#
lines(x= line_vectors[h , 2:3], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[1], alpha=.2))#
points(x= line_vectors[h , 2], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(family[h], alpha=.7))#
#
lines(x= line_vectors[h , 3:4], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[2], alpha=.2))#
points(x= line_vectors[h , 3], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(family[h], alpha=.7))#
#
lines(x= line_vectors[h , 4:5], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[3], alpha=.2))#
points(x= line_vectors[h , 4], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(family[h], alpha=.7))#
#
points(x= line_vectors[h , 5], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(family[h], alpha=.7))#
#
}#
legend("topright", legend= levels(as.factor(spring_data[,43])), pch=19, col= levels(family), bg="white")#
#
dev.off()#
#
##############################################
##############################################
##############################
##############################
pdf(file="~/Dropbox/Spring/lat and daylength_by_diet.pdf", width=15, height=8.5)#
#
jd2016 <- JD(seq(ISOdate(2016,1,1),ISOdate(2016,12,31),by= "day" )) #
plot(0,0,xlim=c(0,500), ylim=c(-90,90), xlab="Julian date", ylab="Latitude", main="Breeding season by Family")#
j <- 10#
i <- 3#
frame_seq <- seq(0,24, length.out=365)#
#
#frame_seq[nearest]#
#
color_ramp <- colorRampPalette(c("black", "cornflowerblue","#FFFF80FF", "#FFFF00FF", "#FF8000FF", "firebrick"))(365)#
#
for(j in -90:90){#
lengths_at_day <- daylength(j,11, jd2016,1)[,3]#
#
nearest <- rep(NA, 365)#
for(i in 1:365){#
try(nearest[i] <- which(min(abs(frame_seq - lengths_at_day[i])) == abs(frame_seq - lengths_at_day[i])), silent=TRUE)#
}#
points(1:365, rep(j,365), col=adjustcolor(color_ramp[nearest], alpha=.5), pch=15, cex=.6)#
}#
#
abline(h=0, col="black")#
#
abline(v =julian(strptime("2016-03-21", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
abline(v =julian(strptime("2016-09-22", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
abline(v =julian(strptime("2016-12-21", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
abline(v =julian(strptime("2016-06-21", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
#legend("topright", legend=c("arrival start", "arrival end", "lay start", "lay end", "hatch start", "hatch end", "fledge start", "fledge end", "depart start", "depart end"), col=c(adjustcolor("red", alpha=1), adjustcolor("red", alpha=.5), adjustcolor("green", alpha=1), adjustcolor("green", alpha=.5), adjustcolor("blue", alpha=1), adjustcolor("blue", alpha=.5), adjustcolor("orange", alpha=1), adjustcolor("orange", alpha=.5), adjustcolor("black", alpha=1), adjustcolor("black", alpha=.5)), pch="-", cex=1.4)#
#####################
#
color_return <- function(julian_date_column, shape, colors){#
lengths_at_day <- daylength(as.numeric(spring_data[,4]),as.numeric(spring_data[,5]), as.numeric(spring_data[, julian_date_column]), rep(1, length(spring_data[, julian_date_column])))[,3]#
frame_seq <- seq(0,24, length.out=365)#
nearest <- rep(NA, length(lengths_at_day))#
for(i in 1:length(lengths_at_day)){#
try(nearest[i] <- which(min(abs(frame_seq - lengths_at_day[i])) == abs(frame_seq - lengths_at_day[i])), silent=TRUE)#
}#
points(spring_data[, julian_date_column], as.numeric(spring_data[,4]), pch=shape, cex=1.5, col=adjustcolor( colors[nearest], alpha=1))#
#
}#
#color_return(32, 15, spring_data[,44])#
#color_return(33, 15, spring_data[,44])#
#
#color_return(34, 17, spring_data[,44])#
#color_return(35, 15, spring_data[,44])#
#
#color_return(36, 25, spring_data[,44])#
#color_return(37, 25, spring_data[,44])#
#
#color_return(38, 11, spring_data[,44])#
#color_return(39, 11, spring_data[,44])#
#
#color_return(40, 23, spring_data[,44])#
#color_return(41, 23, spring_data[,44])#
#
adjuster <- 38#
residuals <- 40#
up_down <- 5#
lines(declination(jd2016 + adjuster) + up_down)#
lines(declination(jd2016+ adjuster) + residuals + up_down, lty=2)#
lines(declination(jd2016+ adjuster) - residuals + up_down, lty=2)#
#
names(spring_data)#
head(spring_data)#
diets <- as.factor(spring_data[,29])#
levels(diets) <- colorRampPalette(c( "#756bb1", "#bcbddc", "#efedf5"), alpha=.7)(length(levels(diets)))#
head(spring_data[,32:38])#
line_vectors <- spring_data[,c(4,32, 34, 36, 38)]#
dim(line_vectors)#
color_vector <- colorRampPalette(c( "#756bb1", "#bcbddc", "#efedf5"))(4)#
#
h <-300#
for(h in 1:length(spring_data[, 1])){#
lines(x= line_vectors[h , 2:3], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[1], alpha=.2))#
points(x= line_vectors[h , 2], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(diets[h], alpha=.7))#
#
lines(x= line_vectors[h , 3:4], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[2], alpha=.2))#
points(x= line_vectors[h , 3], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(diets[h], alpha=.7))#
#
lines(x= line_vectors[h , 4:5], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[3], alpha=.2))#
points(x= line_vectors[h , 4], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(diets[h], alpha=.7))#
#
points(x= line_vectors[h , 5], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(diets[h], alpha=.7))#
#
}#
#
legend("topright", legend= levels(as.factor(spring_data[,29])), pch=19, col= levels(diets), bg="white")#
#
dev.off()
##############################
##############################
pdf(file="~/Dropbox/Spring/lat and daylength_by_family.pdf", width=15, height=8.5)#
#
jd2016 <- JD(seq(ISOdate(2016,1,1),ISOdate(2016,12,31),by= "day" )) #
plot(0,0,xlim=c(0,500), ylim=c(-90,90), xlab="Julian date", ylab="Latitude", main="Breeding season by Family")#
j <- 10#
i <- 3#
frame_seq <- seq(0,24, length.out=365)#
#
#frame_seq[nearest]#
#
color_ramp <- colorRampPalette(c("black", "cornflowerblue","#FFFF80FF", "#FFFF00FF", "#FF8000FF", "firebrick"))(365)#
#
for(j in -90:90){#
lengths_at_day <- daylength(j,11, jd2016,1)[,3]#
#
nearest <- rep(NA, 365)#
for(i in 1:365){#
try(nearest[i] <- which(min(abs(frame_seq - lengths_at_day[i])) == abs(frame_seq - lengths_at_day[i])), silent=TRUE)#
}#
points(1:365, rep(j,365), col=adjustcolor(color_ramp[nearest], alpha=.5), pch=15, cex=.6)#
}#
#
abline(h=0, col="black")#
#
abline(v =julian(strptime("2016-03-21", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
abline(v =julian(strptime("2016-09-22", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
abline(v =julian(strptime("2016-12-21", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
abline(v =julian(strptime("2016-06-21", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
#legend("topright", legend=c("arrival start", "arrival end", "lay start", "lay end", "hatch start", "hatch end", "fledge start", "fledge end", "depart start", "depart end"), col=c(adjustcolor("red", alpha=1), adjustcolor("red", alpha=.5), adjustcolor("green", alpha=1), adjustcolor("green", alpha=.5), adjustcolor("blue", alpha=1), adjustcolor("blue", alpha=.5), adjustcolor("orange", alpha=1), adjustcolor("orange", alpha=.5), adjustcolor("black", alpha=1), adjustcolor("black", alpha=.5)), pch="-", cex=1.4)#
#####################
#
color_return <- function(julian_date_column, shape, colors){#
lengths_at_day <- daylength(as.numeric(spring_data[,4]),as.numeric(spring_data[,5]), as.numeric(spring_data[, julian_date_column]), rep(1, length(spring_data[, julian_date_column])))[,3]#
frame_seq <- seq(0,24, length.out=365)#
nearest <- rep(NA, length(lengths_at_day))#
for(i in 1:length(lengths_at_day)){#
try(nearest[i] <- which(min(abs(frame_seq - lengths_at_day[i])) == abs(frame_seq - lengths_at_day[i])), silent=TRUE)#
}#
points(spring_data[, julian_date_column], as.numeric(spring_data[,4]), pch=shape, cex=1.5, col=adjustcolor( colors[nearest], alpha=1))#
#
}#
#color_return(32, 15, spring_data[,44])#
#color_return(33, 15, spring_data[,44])#
#
#color_return(34, 17, spring_data[,44])#
#color_return(35, 15, spring_data[,44])#
#
#color_return(36, 25, spring_data[,44])#
#color_return(37, 25, spring_data[,44])#
#
#color_return(38, 11, spring_data[,44])#
#color_return(39, 11, spring_data[,44])#
#
#color_return(40, 23, spring_data[,44])#
#color_return(41, 23, spring_data[,44])#
#
adjuster <- 38#
residuals <- 40#
up_down <- 5#
lines(declination(jd2016 + adjuster) + up_down)#
lines(declination(jd2016+ adjuster) + residuals + up_down, lty=2)#
lines(declination(jd2016+ adjuster) - residuals + up_down, lty=2)#
#
names(spring_data)#
head(spring_data)#
family <- as.factor(spring_data[,43])#
levels(family) <- rainbow(length(levels(family)))#
#
head(spring_data[,32:38])#
line_vectors <- spring_data[,c(4,32, 34, 36, 38)]#
dim(line_vectors)#
color_vector <- colorRampPalette(c( "#756bb1", "#bcbddc", "#efedf5"))(4)#
#
h <-300#
for(h in 1:length(spring_data[, 1])){#
lines(x= line_vectors[h , 2:3], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[1], alpha=.2))#
points(x= line_vectors[h , 2], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(family[h], alpha=.7))#
#
lines(x= line_vectors[h , 3:4], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[2], alpha=.2))#
points(x= line_vectors[h , 3], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(family[h], alpha=.7))#
#
lines(x= line_vectors[h , 4:5], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[3], alpha=.2))#
points(x= line_vectors[h , 4], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(family[h], alpha=.7))#
#
points(x= line_vectors[h , 5], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(family[h], alpha=.7))#
#
}#
legend("topright", legend= levels(as.factor(spring_data[,43])), pch=19, col= levels(family), bg="white")#
#
dev.off()#
#
##############################################
##############################################
##############################
##############################
pdf(file="~/Dropbox/Spring/lat and daylength_by_diet.pdf", width=15, height=8.5)#
#
jd2016 <- JD(seq(ISOdate(2016,1,1),ISOdate(2016,12,31),by= "day" )) #
plot(0,0,xlim=c(0,500), ylim=c(-90,90), xlab="Julian date", ylab="Latitude", main="Breeding season by Family")#
j <- 10#
i <- 3#
frame_seq <- seq(0,24, length.out=365)#
#
#frame_seq[nearest]#
#
color_ramp <- colorRampPalette(c("black", "cornflowerblue","#FFFF80FF", "#FFFF00FF", "#FF8000FF", "firebrick"))(365)#
#
for(j in -90:90){#
lengths_at_day <- daylength(j,11, jd2016,1)[,3]#
#
nearest <- rep(NA, 365)#
for(i in 1:365){#
try(nearest[i] <- which(min(abs(frame_seq - lengths_at_day[i])) == abs(frame_seq - lengths_at_day[i])), silent=TRUE)#
}#
points(1:365, rep(j,365), col=adjustcolor(color_ramp[nearest], alpha=.5), pch=15, cex=.6)#
}#
#
abline(h=0, col="black")#
#
abline(v =julian(strptime("2016-03-21", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
abline(v =julian(strptime("2016-09-22", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
abline(v =julian(strptime("2016-12-21", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
abline(v =julian(strptime("2016-06-21", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
#legend("topright", legend=c("arrival start", "arrival end", "lay start", "lay end", "hatch start", "hatch end", "fledge start", "fledge end", "depart start", "depart end"), col=c(adjustcolor("red", alpha=1), adjustcolor("red", alpha=.5), adjustcolor("green", alpha=1), adjustcolor("green", alpha=.5), adjustcolor("blue", alpha=1), adjustcolor("blue", alpha=.5), adjustcolor("orange", alpha=1), adjustcolor("orange", alpha=.5), adjustcolor("black", alpha=1), adjustcolor("black", alpha=.5)), pch="-", cex=1.4)#
#####################
#
color_return <- function(julian_date_column, shape, colors){#
lengths_at_day <- daylength(as.numeric(spring_data[,4]),as.numeric(spring_data[,5]), as.numeric(spring_data[, julian_date_column]), rep(1, length(spring_data[, julian_date_column])))[,3]#
frame_seq <- seq(0,24, length.out=365)#
nearest <- rep(NA, length(lengths_at_day))#
for(i in 1:length(lengths_at_day)){#
try(nearest[i] <- which(min(abs(frame_seq - lengths_at_day[i])) == abs(frame_seq - lengths_at_day[i])), silent=TRUE)#
}#
points(spring_data[, julian_date_column], as.numeric(spring_data[,4]), pch=shape, cex=1.5, col=adjustcolor( colors[nearest], alpha=1))#
#
}#
#color_return(32, 15, spring_data[,44])#
#color_return(33, 15, spring_data[,44])#
#
#color_return(34, 17, spring_data[,44])#
#color_return(35, 15, spring_data[,44])#
#
#color_return(36, 25, spring_data[,44])#
#color_return(37, 25, spring_data[,44])#
#
#color_return(38, 11, spring_data[,44])#
#color_return(39, 11, spring_data[,44])#
#
#color_return(40, 23, spring_data[,44])#
#color_return(41, 23, spring_data[,44])#
#
adjuster <- 38#
residuals <- 40#
up_down <- 5#
lines(declination(jd2016 + adjuster) + up_down)#
lines(declination(jd2016+ adjuster) + residuals + up_down, lty=2)#
lines(declination(jd2016+ adjuster) - residuals + up_down, lty=2)#
#
names(spring_data)#
head(spring_data)#
diets <- as.factor(spring_data[,29])#
levels(diets) <- rainbow(length(levels(diets)))#
head(spring_data[,32:38])#
line_vectors <- spring_data[,c(4,32, 34, 36, 38)]#
dim(line_vectors)#
color_vector <- colorRampPalette(c( "#756bb1", "#bcbddc", "#efedf5"))(4)#
#
h <-300#
for(h in 1:length(spring_data[, 1])){#
lines(x= line_vectors[h , 2:3], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[1], alpha=.2))#
points(x= line_vectors[h , 2], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(diets[h], alpha=.7))#
#
lines(x= line_vectors[h , 3:4], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[2], alpha=.2))#
points(x= line_vectors[h , 3], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(diets[h], alpha=.7))#
#
lines(x= line_vectors[h , 4:5], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[3], alpha=.2))#
points(x= line_vectors[h , 4], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(diets[h], alpha=.7))#
#
points(x= line_vectors[h , 5], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(diets[h], alpha=.7))#
#
}#
#
legend("topright", legend= levels(as.factor(spring_data[,29])), pch=19, col= levels(diets), bg="white")#
#
dev.off()
##############################
##############################
pdf(file="~/Dropbox/Spring/lat and daylength_by_diet.pdf", width=15, height=8.5)#
#
jd2016 <- JD(seq(ISOdate(2016,1,1),ISOdate(2016,12,31),by= "day" )) #
plot(0,0,xlim=c(0,500), ylim=c(-90,90), xlab="Julian date", ylab="Latitude", main="Breeding season by Diet")#
j <- 10#
i <- 3#
frame_seq <- seq(0,24, length.out=365)#
#
#frame_seq[nearest]#
#
color_ramp <- colorRampPalette(c("black", "cornflowerblue","#FFFF80FF", "#FFFF00FF", "#FF8000FF", "firebrick"))(365)#
#
for(j in -90:90){#
lengths_at_day <- daylength(j,11, jd2016,1)[,3]#
#
nearest <- rep(NA, 365)#
for(i in 1:365){#
try(nearest[i] <- which(min(abs(frame_seq - lengths_at_day[i])) == abs(frame_seq - lengths_at_day[i])), silent=TRUE)#
}#
points(1:365, rep(j,365), col=adjustcolor(color_ramp[nearest], alpha=.5), pch=15, cex=.6)#
}#
#
abline(h=0, col="black")#
#
abline(v =julian(strptime("2016-03-21", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
abline(v =julian(strptime("2016-09-22", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
abline(v =julian(strptime("2016-12-21", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
abline(v =julian(strptime("2016-06-21", format="%Y-%m-%d"), origin= as.POSIXct("2016-01-01")), lty=1, col="black")#
#
#legend("topright", legend=c("arrival start", "arrival end", "lay start", "lay end", "hatch start", "hatch end", "fledge start", "fledge end", "depart start", "depart end"), col=c(adjustcolor("red", alpha=1), adjustcolor("red", alpha=.5), adjustcolor("green", alpha=1), adjustcolor("green", alpha=.5), adjustcolor("blue", alpha=1), adjustcolor("blue", alpha=.5), adjustcolor("orange", alpha=1), adjustcolor("orange", alpha=.5), adjustcolor("black", alpha=1), adjustcolor("black", alpha=.5)), pch="-", cex=1.4)#
#####################
#
color_return <- function(julian_date_column, shape, colors){#
lengths_at_day <- daylength(as.numeric(spring_data[,4]),as.numeric(spring_data[,5]), as.numeric(spring_data[, julian_date_column]), rep(1, length(spring_data[, julian_date_column])))[,3]#
frame_seq <- seq(0,24, length.out=365)#
nearest <- rep(NA, length(lengths_at_day))#
for(i in 1:length(lengths_at_day)){#
try(nearest[i] <- which(min(abs(frame_seq - lengths_at_day[i])) == abs(frame_seq - lengths_at_day[i])), silent=TRUE)#
}#
points(spring_data[, julian_date_column], as.numeric(spring_data[,4]), pch=shape, cex=1.5, col=adjustcolor( colors[nearest], alpha=1))#
#
}#
#color_return(32, 15, spring_data[,44])#
#color_return(33, 15, spring_data[,44])#
#
#color_return(34, 17, spring_data[,44])#
#color_return(35, 15, spring_data[,44])#
#
#color_return(36, 25, spring_data[,44])#
#color_return(37, 25, spring_data[,44])#
#
#color_return(38, 11, spring_data[,44])#
#color_return(39, 11, spring_data[,44])#
#
#color_return(40, 23, spring_data[,44])#
#color_return(41, 23, spring_data[,44])#
#
adjuster <- 38#
residuals <- 40#
up_down <- 5#
lines(declination(jd2016 + adjuster) + up_down)#
lines(declination(jd2016+ adjuster) + residuals + up_down, lty=2)#
lines(declination(jd2016+ adjuster) - residuals + up_down, lty=2)#
#
names(spring_data)#
head(spring_data)#
diets <- as.factor(spring_data[,29])#
levels(diets) <- rainbow(length(levels(diets)))#
head(spring_data[,32:38])#
line_vectors <- spring_data[,c(4,32, 34, 36, 38)]#
dim(line_vectors)#
color_vector <- colorRampPalette(c( "#756bb1", "#bcbddc", "#efedf5"))(4)#
#
h <-300#
for(h in 1:length(spring_data[, 1])){#
lines(x= line_vectors[h , 2:3], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[1], alpha=.2))#
points(x= line_vectors[h , 2], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(diets[h], alpha=.7))#
#
lines(x= line_vectors[h , 3:4], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[2], alpha=.2))#
points(x= line_vectors[h , 3], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(diets[h], alpha=.7))#
#
lines(x= line_vectors[h , 4:5], y=rep(line_vectors[h , 1], 2), pch=19, lwd=1.5, col= adjustcolor(color_vector[3], alpha=.2))#
points(x= line_vectors[h , 4], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(diets[h], alpha=.7))#
#
points(x= line_vectors[h , 5], y=line_vectors[h , 1], pch=19, cex=1.5, col= adjustcolor(diets[h], alpha=.7))#
#
}#
#
legend("topright", legend= levels(as.factor(spring_data[,29])), pch=19, col= levels(diets), bg="white")#
#
dev.off()
shiny::runApp('GitHub/D-place-visualiser')
load('www/AUSTRONESIAN_Society_data_with_binary_conversions.Rdata')
setwd("~/GitHub/D-place-visualiser")
load('www/AUSTRONESIAN_Society_data_with_binary_conversions.Rdata')
dim(binary_traits)
binary_traits <- cbind(binary_traits, rep(NA, length(binary_traits[,1])), rep(NA, length(binary_traits[,1])))
dim(binary_traits)
length(8:36)
length(tree_choice$tip.label)
plot(tree_choice, type="fan", edge.color=col_vector)
tree_choice
col_vector
col_vector <- c("gold", "red", "white")[as.factor(as.character(binary_traits[, as.numeric(input$trait_choose_1)]))]
runApp()
runApp()
runApp()
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tree_choice, pch=19, col = col_vector)
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tree_choice, pch=19)
tiplabels(tree_choice, pch=19)
tiplabels(tree_choice$tip.label, pch=19)
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tree_choice$tip.label, pch=19)
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tree_choice$tip.label, text=NA, pch=19)
tiplabels(tree_choice$tip.label, pch=19)
runApp()
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tree_choice$tip.label, pch=19, text="")
tiplabels(tip = tree_choice$tip.label, pch=19, frame="none")
runApp()
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tip = tree_choice$tip.label, pch=19, frame="c")
tiplabels(tip = tree_choice$tip.label, pch=19, frame="circle")
tiplabels(tip = tree_choice$tip.label, pch=19)
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tip = tree_choice$tip.label, pch=19)
tiplabels(tree_choice$tip.label, pch=19)
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tree_choice$tip.label, pch=19, frame="circle")
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tree_choice$tip.label, pch=19, frame="circle", text="")
tiplabels(tree_choice$tip.label)
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tree_choice$tip.label, pch=19, frame="circle" )
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tree_choice$tip.label, pch=19, frame="circle" , bg="transparent")
#ope
tiplabels(tree_choice$tip.label, pch=19, frame="none" , bg="transparent")
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tree_choice$tip.label, pch=19, frame="none" , bg="transparent")
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tree_choice$tip.label, tip=tree_choice$tip.label, pch=19, frame="none" , bg="transparent")
tiplabels(tree_choice, tip=tree_choice$tip.label, pch=19, frame="none" , bg="transparent")
tree_choice$tip.label
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tree_choice$tip.label, tip=NA, pch=19, frame="none" , bg="transparent")
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(tree_choice, tip=NA, pch=19, frame="none" , bg="transparent")
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(pch=19)
par(mar=c(0,0,0,0))
plot(tree_choice, type="fan",  show.tip.label=FALSE)
tiplabels(pch=19, col=col_vector)
col_vector
runApp()
runApp()
